Создание и использование входов и выходов (22.09.2015)

==== Создание входов и выходов ====

-- *.h --

В разделе "public: // Коммуникационные данные".

Входы объявляются так:
UPropertyInputData<тип_данных, имя_класса> имя_члена_класса;

Выходы объявляются так же:
UPropertyOutputData<тип_данных, имя_класса> имя_члена_класса;

Например:
UPropertyInputData<UBitmap, TPipelineDetector> GboFrame; // вход компонента TPipelineDetector
UPropertyOutputData<float, TPipelineDetector> XPos; // выход компонента TPipelineDetector

-- *.cpp --

В конструкторе нужно создать входы и выходы при создании объекта, это делается так:

имя_члена_класса("название_входа", this, n), где

название_входа - название этого входа/выхода, которое используется при различных манипуляциях с входом/выходом. Например, эту строку нужно указывать при создании связей. Это название часто совпадает с именем члена класса.
n - у каждого входа и выхода всё ещё должен быть свой уникальный среди входов/выходов номер. Можно просто нумеровать их по порядку.


==== Обращение к входам и выходам в коде ====

К входам и выходам нужно обращаться, как к указателям, например:
float x = *XPos; // получено значение, хранящееся в XPos
GboFrame->SomeFunction(); // вход или выход является классом, и вызван его метод


==== Передача данных ====

Чтобы передавать данные между входами и выходами компонентов, нужно после их создания создать между ними связь.

Пример создания связи:

model->CreateLink(videoCaptureName1, "OutputImage", imageProcessingName1, "InputImage");

Здесь model - указатель на модель.
videoCaptureName1, imageProcessingName1 - имена компонентов в модели.
"OutputImage", "InputImage" - названия входов/выходов, которые присваиваются им в конструкторе ("название_входа").

Сам процесс передачи и приёма данных происходит автоматически, и в коде компонента требуется только задать выходу нужное значение.